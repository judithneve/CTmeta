% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CTmeta.R
\name{CTmeta}
\alias{CTmeta}
\title{Continuous-time meta-analysis on standarized lagged effects}
\usage{
CTmeta(
  N,
  DeltaT,
  DeltaTStar,
  Phi,
  SigmaVAR = NULL,
  Gamma = NULL,
  Moderators = 0,
  Mod = NULL,
  FEorRE = 1,
  alpha = 0.05
)
}
\arguments{
\item{N}{Number of persons (panel data) or number of measurement occasions - 1 (time series data) used in the S primary studies. Matrix of size S times 1.}

\item{DeltaT}{The time intervals used in the S primary studies. Matrix of size S times 1. Note that all the time intervals should be on the same scale (e.g., two time-intervals of 60 minutes and 2 hours, should be either 60 and 120 or 1 and 2).}

\item{DeltaTStar}{The time interval (scalar) to which the standardized lagged effects matrix should be transformed to.}

\item{Phi}{Stacked matrix of size S*q times q or array with dimensions q times q times S of (un)standardized lagged effects matrices for all S primary studies in the meta-analysis; with q the number of variables (leading to an q times q lagged effects matrix in a single primary study). Note: In case primary studies report (lagged) correlation matrices, one can use the function 'calc.TransPhi_Corr' to transform those to the corresponding standardized lagged effects matrices (see ?calc.TransPhi_Corr and examples below).}

\item{SigmaVAR}{(optional: either SigmaVAR or Gamma). Stacked matrix of size S*q times q or array with dimensions q times q times S of residual covariance matrices of the first-order discrete-time vector autoregressive (DT-VAR(1)) model.
Note that if Phi and SigmaVAR are known, Gamma can be calculated; hence, only SigmaVAR or Gamma is needed as input (if only Gamma, then use 'Gamma = Gamma' or set SigmaVAR to NULL, see examples below).}

\item{Gamma}{(optional: either SigmaVAR or Gamma). Stacked matrix of size S*q times q or array with dimensions q times q times S of stationary covariance matrices, that is, the contemporaneous covariance matrices of the data sets. Note that if Phi and Gamma are known, SigmaVAR can be calculated; hence, only SigmaVAR or Gamma is needed as input (if only Gamma, then use 'Gamma = Gamma' or set SigmaVAR to NULL, see examples below).}

\item{Moderators}{Indicator whether there are moderators to be included (1) or not (0; default).}

\item{Mod}{Matrix of moderators to be included in the analysis when Moderators == 1. By default, Mod = NULL.}

\item{FEorRE}{Indicator whether continuous-time meta-analysis should use a fixed-effects model (1; default) or random-effects model (2).}

\item{alpha}{The alpha level in determining the (1-alpha)*100\% confidence interval (CI). By default, alpha = 0.05; resulting in a 95\% CI.}
}
\value{
The output comprises, among others, the overall vectorized transformed standardized lagged effects, their covariance matrix, and the corresponding elleptical/multivariate 95\% CI.
}
\description{
Continuous-time meta-analysis (CTmeta) on standarized lagged effects taking into account the various time-intervals used in the primary studies. There is also an interactive web application on my website to perform CTmeta: \url{https://www.uu.nl/staff/RMKuiper/Websites\%20\%2F\%20Shiny\%20apps}.
}
\examples{

##################################################################################################
# Input needed in examples below with q=2 variables and S=3 primary studies
#
N <- matrix(c(643, 651, 473))
DeltaT <- matrix(c(2, 3, 1))
DeltaTStar <- 1
#
# I will use the example matrices stored in the package:
Phi <- myPhi
SigmaVAR <- mySigmaVAR
Gamma <- myGamma # Note: CTmeta does not need both SigmaVAR and Gamma, as denomstrated below.
# These are all three stacked matrices of size S*q times q.
# The CTmeta function will standardize these matrices (to make comparison of effects meaningful).
#
Moderators = 0 # By default set to 0. Hence, not per se needed, as denomstrated below.
##################################################################################################


## Example without moderators ##

# Fixed effects model #

# Run CTmeta with, for instance,
CTmeta(N, DeltaT, DeltaTStar, Phi, Gamma = Gamma)

# There are multiple options; use one of the following:
CTmeta(N, DeltaT, DeltaTStar, Phi, SigmaVAR, Gamma, Moderators, Mod, 1)
CTmeta(N, DeltaT, DeltaTStar, Phi, SigmaVAR, Gamma, Moderators, Mod)
CTmeta(N, DeltaT, DeltaTStar, Phi, SigmaVAR, Gamma, Moderators)
CTmeta(N, DeltaT, DeltaTStar, Phi, SigmaVAR, Gamma)
CTmeta(N, DeltaT, DeltaTStar, Phi, SigmaVAR)
CTmeta(N, DeltaT, DeltaTStar, Phi, SigmaVAR = SigmaVAR)
CTmeta(N, DeltaT, DeltaTStar, Phi, Gamma = Gamma)
CTmeta(N, DeltaT, DeltaTStar, Phi, NULL, Gamma)

# Note: Do NOT use
#CTmeta(N, DeltaT, DeltaTStar, Phi, Gamma)
# Then, CTmeta incorrectly uses SigmaVAR = Gamma.


# Random effects model #

# Add "FEorRE = 2"; e.g.,
CTmeta(N, DeltaT, DeltaTStar, Phi, Gamma = Gamma, FEorRE = 2)


## Example with moderators ##

Mod <- matrix(c(64,65,47)) # 1 moderator
#Mod <- matrix(cbind(c(64,65,47), c(78,89,34)), ncol = q); colnames(Mod) <- c("Mod1", "Mod2") # two moderators, in each column 1
CTmeta(N, DeltaT, DeltaTStar, Phi, Gamma = Gamma, Moderators = 1, Mod = Mod) # fixed effects model
#CTmeta(N, DeltaT, DeltaTStar, Phi, Gamma = Gamma, Moderators = 1, Mod = Mod, FEorRE = 2) # random effects model



## Make Phi-plot of resulting overall Phi ##

# Note: The Phi-plot can be made using the function 'PhiPlot' (see below) or by using the interactive web app from my website (\url{https://www.uu.nl/staff/RMKuiper/Websites\\%20\\%2F\\%20Shiny\\%20apps}).

# Extract the q times q overall Phi matrix
out_CTmeta <- CTmeta(N, DeltaT, DeltaTStar, Phi, Gamma = Gamma)
q <- sqrt(length(out_CTmeta$Overall_standPhi_DeltaTStar))
overallPhi <- matrix(out_CTmeta$Overall_standPhi_DeltaTStar, byrow = T, ncol = q) # resulting overall Phi
# Determine the q times q Drift matrix which is the continuous-time equivalent of the overall Phi matrix
if (!require("expm")) install.packages("expm") # Use expm package for function logm()
library(expm)
overallDrift <- logm(overallPhi)/DeltaTStar

# Make Phi-plot:
Title <- as.list(expression(paste(Phi(Delta[t]), " plot:"), "How do the overall lagged parameters vary", "as a function of the time-interval"))
PhiPlot(DeltaTStar, overallDrift, Min = 0, Max = 40, Step = 0.5, Title = Title)



## Evaluate dominance of cross-lagged effects ##

# Extract the vectorized overall standardized Phi matrix and its covariance matrix
out_CTmeta <- CTmeta(N, DeltaT, DeltaTStar, Phi, Gamma = Gamma)
est <- out_CTmeta$Overall_standPhi_DeltaTStar
VCOV <- out_CTmeta$CovMx_OverallPhi_DeltaTStar
# Specify hypothesis
H1 <- "overallPhi12 < overallPhi21"
#H2 <- "overallPhi12 > overallPhi21"
# Evaluate dominance of cross-lagged effects via AIC-type criterion called the GORICA (Altinisik, Nederhof, Hoijtink, Oldehinkel, Kuiper, unpublished).
if (!require("restriktor")) install.packages("restriktor") # Use restriktor package for function goric() of Vanbrabant and Kuiper.
library(restriktor)
#goric(est, VCOV = VCOV, H1, H2, type = "gorica", comparison = "none") # authors of goric(): Vanbrabant and Kuiper
# or equivalently:
goric(est, VCOV = VCOV, H1, type = "gorica", comparison = "complement")



## What if primary studies report a (lagged) correlation matrix ##

# Supose all S=3 primary studies reported the following lagged correlation matrix:
q <- 2
corr_YXYX <- matrix(c(1.00, 0.40, 0.63, 0.34,
                      0.40, 1.00, 0.31, 0.63,
                      0.63, 0.31, 1.00, 0.41,
                      0.34, 0.63, 0.41, 1.00), byrow = T, ncol = 2*q)
# In the example below, the following values are used:
#DeltaTStar <- 12
#DeltaT <- 24
#N <- 2235
# Then, use the function 'calc.TransPhi_Corr' to calculate the corresponding standardized lagged effects matrix per primary study:
out <- calc.TransPhi_Corr(12, 24, 2235, corr_YXYX) # TO DO
Phi_1 <- matrix(out$vecStandPhi_DeltaTStar, byrow = T, ncol = q)
Phi_2 <- matrix(out$vecStandPhi_DeltaTStar, byrow = T, ncol = q)
Phi_3 <- matrix(out$vecStandPhi_DeltaTStar, byrow = T, ncol = q)
Phi <- rbind(Phi_1, Phi_2, Phi_3) # This, returns a stacked matrix of size S q times q.
# For more details, see ?calc.TransPhi_Corr

# The example CTmeta() code above can be run using this Phi; e.g.,
CTmeta(N, DeltaT, DeltaTStar, Phi, Gamma = Gamma)

}
