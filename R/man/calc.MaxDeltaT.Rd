% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/HelpFiles_Calc Max Delta t.r
\name{calc.MaxDeltaT}
\alias{calc.MaxDeltaT}
\title{Time-interval (DeltaT) for which Phi_ij(DeltaT) reaches its minimum or maximum (together with that minimum or maximum)}
\usage{
calc.MaxDeltaT(Drift = NULL, Phi = NULL)
}
\arguments{
\item{Drift}{Matrix of size q times q of (un)standardized continuous-time lagged effects, called drift matrix. Note that Phi(DeltaT) = expm(Drift*DeltaT).}

\item{Phi}{Optional. Matrix of size q times q of (un)standardized lagged effects. By default, input for Drift is used; only when Drift = NULL, Phi will be used (to determine the corresponding Drift).}
}
\value{
The output renders, per element (i,j), the time-interval for which Phi_ij reaches its minimum/maximum together with this minimum/maximum.
}
\description{
Time-interval (DeltaT) for which Phi_ij(DeltaT) reaches its minimum or maximum (together with that minimum or maximum). The interactive web application 'Phi-and-Psi-Plots and Find DeltaT' also contains this functionality, you can find it on my website: \url{https://www.uu.nl/staff/RMKuiper/Websites\%20\%2F\%20Shiny\%20apps}.
}
\examples{

##################################################################################################
# Input needed in examples below with q=2 variables.
# I will use the example matrices stored in the package:
Phi <- myPhi[1:2, 1:2]
##################################################################################################

calc.MaxDeltaT(Phi = Phi)

# If you would use the drift matrix Drift as input, then use:
##if (!require("expm")) install.packages("expm") # Use expm package for function logm()
##library(expm)
##Drift <- logm(Phi)/DeltaT
#calc.MaxDeltaT(Drift = Drift)
#calc.MaxDeltaT(Drift)


# Note that the function 'PhiPlot' can help to see (per element) whether a minimum or maximum is reached.
##if (!require("expm")) install.packages("expm") # Use expm package for function logm()
##library(expm)
##Drift <- logm(Phi)/DeltaT
#PhiPlot(DeltaT = 1, Drift)

}
